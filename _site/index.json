{
  "DOCUMENTATION/getting-started.html": {
    "href": "DOCUMENTATION/getting-started.html",
    "title": "Getting Started | ASE ASSIGNMENT",
    "keywords": "Getting Started"
  },
  "DOCUMENTATION/introduction.html": {
    "href": "DOCUMENTATION/introduction.html",
    "title": "Introduction | ASE ASSIGNMENT",
    "keywords": "Introduction"
  },
  "api/ASE_Assignment.ASEForm.html": {
    "href": "api/ASE_Assignment.ASEForm.html",
    "title": "Class ASEForm | ASE ASSIGNMENT",
    "keywords": "Class ASEForm Namespace ASE_Assignment Assembly ASE Assignment.dll public class ASEForm : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form ASEForm Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ASEForm() Initializes a new instance of the ASEForm class. public ASEForm() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ASE_Assignment.ArrayCommand.html": {
    "href": "api/ASE_Assignment.ArrayCommand.html",
    "title": "Class ArrayCommand | ASE ASSIGNMENT",
    "keywords": "Class ArrayCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents an array command for handling array operations such as creation, assignment, and retrieval of values. public class ArrayCommand : Evaluation, ICommand Inheritance object Command Evaluation ArrayCommand Implements ICommand Derived PeekCommand PokeCommand Inherited Members Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ArrayCommand() Initializes a new instance of the ArrayCommand class. public ArrayCommand() Fields IntValue protected int IntValue Field Value int PEEK protected const bool PEEK = false Field Value bool POKE public const bool POKE = true Field Value bool RealValue protected double RealValue Field Value double columnCurrent protected int columnCurrent Field Value int columnExpression protected string columnExpression Field Value string columnsCount protected int columnsCount Field Value int intArray protected int[,] intArray Field Value int[,] peekValue protected string peekValue Field Value string pokeValue protected string pokeValue Field Value string realArray protected double[,] realArray Field Value double[,] rowCurrent protected int rowCurrent Field Value int rowExpression protected string rowExpression Field Value string rowsCount protected int rowsCount Field Value int type protected string type Field Value string Properties Columns Gets the number of columns in the array. protected int Columns { get; } Property Value int Rows Gets the number of rows in the array. protected int Rows { get; } Property Value int Methods ArrayRestrictions() Applies restrictions specific to the array implementation. public void ArrayRestrictions() CheckParameters(string[]) Checks the validity of the parameters passed to the array command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Exceptions CommandException Thrown if the parameters are invalid. Compile() Compiles the array command, validating parameters and initializing the array. public override void Compile() Execute() Executes the array command, creating the array based on the specified type. public override void Execute() Exceptions CommandException Thrown if an unsupported array type is specified. GetIntArray(int, int) public virtual int GetIntArray(int row, int col) Parameters row int col int Returns int GetRealArray(int, int) public virtual double GetRealArray(int row, int col) Parameters row int col int Returns double ProcessArrayParametersCompile(bool) Processes parameters for array operations during compilation. protected virtual void ProcessArrayParametersCompile(bool isPokeOperation) Parameters isPokeOperation bool Indicates whether the operation is a poke (write) operation. Exceptions CommandException Thrown if the syntax or parameters are invalid. ProcessArrayParametersExecute(bool) Processes parameters for array operations during execution. protected virtual void ProcessArrayParametersExecute(bool isPokeOperation) Parameters isPokeOperation bool Indicates whether the operation is a poke (write) operation. Exceptions CommandException Thrown if row/column indices or values are invalid. ReduceRestrictionCounter() Reduces the restriction counter, used for tracking array usage limits. protected void ReduceRestrictionCounter() SetIntArray(int, int, int) public virtual void SetIntArray(int value, int row, int col) Parameters value int row int col int SetRealArray(double, int, int) public virtual void SetRealArray(double value, int row, int col) Parameters value double row int col int"
  },
  "api/ASE_Assignment.BooleanCommand.html": {
    "href": "api/ASE_Assignment.BooleanCommand.html",
    "title": "Class BooleanCommand | ASE ASSIGNMENT",
    "keywords": "Class BooleanCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command for handling boolean operations in the BOOSE framework. public class BooleanCommand : Boolean, ICommand Inheritance object Command Evaluation Boolean BooleanCommand Implements ICommand Inherited Members Boolean.Compile() Boolean.Execute() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Defines restrictions specific to the boolean command. public override void Restrictions()"
  },
  "api/ASE_Assignment.CastCommand.html": {
    "href": "api/ASE_Assignment.CastCommand.html",
    "title": "Class CastCommand | ASE ASSIGNMENT",
    "keywords": "Class CastCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command for casting variables between types in the BOOSE framework. public class CastCommand : Command, ICommand Inheritance object Command CastCommand Implements ICommand Inherited Members Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Validates the parameters for the cast operation. public override void CheckParameters(string[] parameter) Parameters parameter string[] The list of parameters provided to the command. Exceptions CommandException Thrown if the number of parameters is not exactly two. Compile() Compiles the command by validating the source and target variables. public override void Compile() Exceptions CommandException Thrown if the variables do not exist or if the source variable is a RealCommand. Execute() Executes the casting operation, converting an integer value to a real value. public override void Execute() Exceptions InvalidCastException Thrown if the casting operation fails due to mismatched variable types."
  },
  "api/ASE_Assignment.CircleCommand.html": {
    "href": "api/ASE_Assignment.CircleCommand.html",
    "title": "Class CircleCommand | ASE ASSIGNMENT",
    "keywords": "Class CircleCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents the Circle command that draws a circle on the canvas. public class CircleCommand : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter CircleCommand Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CircleCommand() Initializes a new instance of the CircleCommand class. public CircleCommand() CircleCommand(Canvas, int) Initializes a new instance of the CircleCommand class with the specified canvas and radius. public CircleCommand(Canvas canvas, int radius) Parameters canvas Canvas The canvas on which the circle will be drawn. radius int The radius of the circle. Methods CheckParameters(string[]) Validates the parameters for the circle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the Circle command to draw a circle on the canvas. public override void Execute()"
  },
  "api/ASE_Assignment.ClearCommand.html": {
    "href": "api/ASE_Assignment.ClearCommand.html",
    "title": "Class ClearCommand | ASE ASSIGNMENT",
    "keywords": "Class ClearCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents the Clear command that clears the canvas. public class ClearCommand : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter ClearCommand Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ClearCommand() Initializes a new instance of the ClearCommand class. public ClearCommand() ClearCommand(Canvas) Initializes a new instance of the ClearCommand class with the specified canvas. public ClearCommand(Canvas c) Parameters c Canvas The canvas on which the command will operate. Methods CheckParameters(string[]) Validates the parameters for the Clear command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Remarks No validation needed as there are no parameters for this command. Execute() Executes the Clear command to clear the canvas. public override void Execute()"
  },
  "api/ASE_Assignment.CommandParser.html": {
    "href": "api/ASE_Assignment.CommandParser.html",
    "title": "Class CommandParser | ASE ASSIGNMENT",
    "keywords": "Class CommandParser Namespace ASE_Assignment Assembly ASE Assignment.dll Handles parsing and processing drawing commands entered by the user. Commands are executed on the provided BOOSE.ICanvas. public class CommandParser Inheritance object CommandParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandParser(ICanvas, RichTextBox, CommandFactory, StoredProgram) Initializes a new instance of the CommandParser class. public CommandParser(ICanvas canvas, RichTextBox errorMessageBox, CommandFactory factory, StoredProgram program) Parameters canvas ICanvas The canvas object where drawing operations will be performed. errorMessageBox RichTextBox The text box to display error messages. factory CommandFactory The command factory used to create commands. program StoredProgram The stored program object for managing stored commands. Methods ProcessCommand(string) Processes a drawing command by parsing and executing it. public void ProcessCommand(string command) Parameters command string The command string to be processed. Exceptions Exception Thrown when an invalid command or argument is provided."
  },
  "api/ASE_Assignment.DrawToCommand.html": {
    "href": "api/ASE_Assignment.DrawToCommand.html",
    "title": "Class DrawToCommand | ASE ASSIGNMENT",
    "keywords": "Class DrawToCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents the DrawTo command that draws a line from the current position to the specified coordinates. public class DrawToCommand : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters DrawToCommand Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DrawToCommand() Initializes a new instance of the DrawToCommand class. public DrawToCommand() DrawToCommand(Canvas, int, int) Initializes a new instance of the DrawToCommand class with the specified canvas and coordinates. public DrawToCommand(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas on which the command will operate. x int The x-coordinate to draw to. y int The y-coordinate to draw to. Exceptions RestrictionException Thrown if the coordinates are negative. Methods CheckParameters(string[]) Validates the parameters for the DrawTo command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Exceptions CommandException Thrown if the parameter list contains an incorrect number of parameters or invalid coordinates. Execute() Executes the DrawTo command to draw a line to the specified coordinates. public override void Execute() Exceptions RestrictionException Thrown if the coordinates are negative. IndexOutOfRangeException Thrown if the parameters array is out of bounds. Exception Thrown if an unexpected error occurs."
  },
  "api/ASE_Assignment.ElseCommand.html": {
    "href": "api/ASE_Assignment.ElseCommand.html",
    "title": "Class ElseCommand | ASE ASSIGNMENT",
    "keywords": "Class ElseCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents the \"else\" command in a conditional structure, used to define an alternative execution path when the \"if\" condition is false. public class ElseCommand : MyCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand MyCompoundCommand ElseCommand Implements ICommand Inherited Members MyCompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ElseCommand() Initializes a new instance of the ElseCommand class. public ElseCommand() Properties CorrespondingEnd Gets or sets the corresponding EndCommand for this ElseCommand. public EndCommand CorrespondingEnd { get; set; } Property Value EndCommand Methods CheckParameters(string[]) Validates the parameters for the \"else\" command. public override void CheckParameters(string[] parameters) Parameters parameters string[] The parameters to validate. Exceptions CommandException Thrown if the parameters are invalid or do not match the expected \"else\". Compile() Compiles the \"else\" command by linking it to its corresponding \"if\" command and updating the program's structure accordingly. public override void Compile() Exceptions InvalidOperationException Thrown if there is no corresponding command to link to this ElseCommand. Execute() Executes the \"else\" command. Skips the execution of the \"else\" block if the condition of the corresponding \"if\" command is true. public override void Execute()"
  },
  "api/ASE_Assignment.EndCommand.html": {
    "href": "api/ASE_Assignment.EndCommand.html",
    "title": "Class EndCommand | ASE ASSIGNMENT",
    "keywords": "Class EndCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents the \"end\" command that marks the conclusion of compound structures such as loops, conditional statements, or methods. public class EndCommand : MyCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand MyCompoundCommand EndCommand Implements ICommand Inherited Members MyCompoundCommand.CorrespondingCommand MyCompoundCommand.CheckParameters(string[]) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors EndCommand() Initializes a new instance of the EndCommand class. public EndCommand() Methods Compile() Compiles the \"end\" command by linking it to its corresponding start command and setting the appropriate line numbers. public override void Compile() Exceptions CommandException Thrown if the syntax does not match the expected \"end\" type for the corresponding start command. Execute() Executes the \"end\" command by determining the appropriate action based on the corresponding start command type. public override void Execute() Exceptions CommandException Thrown if loop control variables do not exist or invalid loop steps are specified."
  },
  "api/ASE_Assignment.FillCommand.html": {
    "href": "api/ASE_Assignment.FillCommand.html",
    "title": "Class FillCommand | ASE ASSIGNMENT",
    "keywords": "Class FillCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents the Fill command that sets the filled state for shapes on the canvas. public class FillCommand : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter FillCommand Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FillCommand() Initializes a new instance of the FillCommand class. public FillCommand() FillCommand(Canvas, string) Initializes a new instance of the FillCommand class with the specified canvas and text. public FillCommand(Canvas c, string text) Parameters c Canvas The canvas on which the command will operate. text string The text parameter to set the fill state. Exceptions ArgumentNullException Thrown when text is null. Methods CheckParameters(string[]) Validates the parameters for the Fill command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Exceptions CommandException Thrown if the parameter list is null, contains an incorrect number of parameters, or if the text parameter is invalid. Execute() Executes the Fill command to set the filled state based on the provided parameter. public override void Execute() Exceptions RestrictionException Thrown if the text parameter is null, empty, whitespace, or exceeds the allowed length. SetFilled(string) Sets the filled state of the shape based on the provided string value. public void SetFilled(string isFilledStr) Parameters isFilledStr string A string value (\"true\" or \"false\") to set whether the shape is filled. Exceptions CommandException Thrown if the string value is not \"true\" or \"false\"."
  },
  "api/ASE_Assignment.GloabalConfig.html": {
    "href": "api/ASE_Assignment.GloabalConfig.html",
    "title": "Class GloabalConfig | ASE ASSIGNMENT",
    "keywords": "Class GloabalConfig Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a global configuration class that maintains the application's global state. public class GloabalConfig Inheritance object GloabalConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsFillEnabled Gets or sets the filled status, which determines whether shapes should be filled or not. public static bool IsFillEnabled { get; set; } Property Value bool A boolean value indicating the filled status. The default value is false. MaxX public static int MaxX { get; set; } Property Value int MaxY public static int MaxY { get; set; } Property Value int PenSize public static int PenSize { get; set; } Property Value int"
  },
  "api/ASE_Assignment.IfCommand.html": {
    "href": "api/ASE_Assignment.IfCommand.html",
    "title": "Class IfCommand | ASE ASSIGNMENT",
    "keywords": "Class IfCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents an \"if\" command, allowing conditional execution of program code based on a specified condition. public class IfCommand : MyCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand MyCompoundCommand IfCommand Implements ICommand Inherited Members MyCompoundCommand.CorrespondingCommand MyCompoundCommand.CheckParameters(string[]) MyCompoundCommand.Compile() ConditionalCommand.endLineNumber ConditionalCommand.Execute() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors IfCommand() Initializes a new instance of the IfCommand class. public IfCommand() Methods ReduceRestrictions() Reduces restrictions applied during the evaluation or compilation of the \"if\" command. This method is intended to be overridden or implemented as needed in derived classes. protected void ReduceRestrictions()"
  },
  "api/ASE_Assignment.IntCommand.html": {
    "href": "api/ASE_Assignment.IntCommand.html",
    "title": "Class IntCommand | ASE ASSIGNMENT",
    "keywords": "Class IntCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command for handling integer-based operations and behavior. public class IntCommand : Int, ICommand Inheritance object Command Evaluation Int IntCommand Implements ICommand Inherited Members Int.Compile() Int.Execute() Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors IntCommand() Initializes a new instance of the IntCommand class. public IntCommand() Methods Restrictions() Specifies the restrictions or constraints associated with integer operations. This method can be overridden in derived classes to define specific behavior. public override void Restrictions()"
  },
  "api/ASE_Assignment.MethodCommand.html": {
    "href": "api/ASE_Assignment.MethodCommand.html",
    "title": "Class MethodCommand | ASE ASSIGNMENT",
    "keywords": "Class MethodCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command for managing methods in the program. public class MethodCommand : Method, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Method MethodCommand Implements ICommand Inherited Members Method.CheckParameters(string[]) Method.Compile() Method.Execute() Method.LocalVariables Method.MethodName Method.Type CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MethodCommand() Initializes a new instance of the MethodCommand class. Automatically reduces restrictions for the method. public MethodCommand() Methods Restrictions() Defines restrictions or rules for this method command. This method is intended to be overridden for specific implementations. public override void Restrictions()"
  },
  "api/ASE_Assignment.MoveToCommand.html": {
    "href": "api/ASE_Assignment.MoveToCommand.html",
    "title": "Class MoveToCommand | ASE ASSIGNMENT",
    "keywords": "Class MoveToCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to move the pen to a specified position on the canvas. public class MoveToCommand : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters MoveToCommand Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MoveToCommand() Initializes a new instance of the MoveToCommand class. public MoveToCommand() MoveToCommand(Canvas, int, int) Initializes a new instance of the MoveToCommand class with the specified canvas and coordinates. public MoveToCommand(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas on which the move-to operation will be performed. x int The x-coordinate of the position to move to (must not exceed 2000). y int The y-coordinate of the position to move to (must not exceed 2000). Exceptions RestrictionException Thrown if either coordinate exceeds 2000. Methods CheckParameters(string[]) Validates the parameters for the move-to command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters representing the x and y coordinates. Exceptions CommandException Thrown if the number of parameters is incorrect or if the coordinates are invalid (negative or non-integer values). Exception Thrown for any unexpected errors during validation. Execute() Executes the command to move the pen to the specified position on the canvas. public override void Execute() Exceptions IndexOutOfRangeException Thrown if the parameter indices are invalid. RestrictionException Thrown if either coordinate exceeds 2000. Exception Thrown for any unexpected errors during execution."
  },
  "api/ASE_Assignment.MyCompoundCommand.html": {
    "href": "api/ASE_Assignment.MyCompoundCommand.html",
    "title": "Class MyCompoundCommand | ASE ASSIGNMENT",
    "keywords": "Class MyCompoundCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a compound command that associates with a conditional command. This is used for commands that require matching end markers, such as \"ifEnd\", \"whileEnd\", \"forEnd\", or \"methodEnd\". public class MyCompoundCommand : ConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand MyCompoundCommand Implements ICommand Derived ElseCommand EndCommand IfCommand WhileCommand Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Execute() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyCompoundCommand() Initializes a new instance of the MyCompoundCommand class. public MyCompoundCommand() Properties CorrespondingCommand Gets or sets the corresponding conditional command associated with this compound command. public ConditionalCommand CorrespondingCommand { get; set; } Property Value ConditionalCommand Methods CheckParameters(string[]) Checks the parameters of the compound command to ensure they are valid. public override void CheckParameters(string[] parameters) Parameters parameters string[] An array of strings representing the parameters passed to the command. Exceptions CommandException Thrown if the number of parameters is not exactly one or if the parameter does not contain a valid end marker. Compile() Compiles the compound command, performing any necessary setup or validation. public override void Compile()"
  },
  "api/ASE_Assignment.PeekCommand.html": {
    "href": "api/ASE_Assignment.PeekCommand.html",
    "title": "Class PeekCommand | ASE ASSIGNMENT",
    "keywords": "Class PeekCommand Namespace ASE_Assignment Assembly ASE Assignment.dll public class PeekCommand : ArrayCommand, ICommand Inheritance object Command Evaluation ArrayCommand PeekCommand Implements ICommand Inherited Members ArrayCommand.PEEK ArrayCommand.POKE ArrayCommand.type ArrayCommand.IntValue ArrayCommand.RealValue ArrayCommand.rowsCount ArrayCommand.columnsCount ArrayCommand.intArray ArrayCommand.realArray ArrayCommand.pokeValue ArrayCommand.peekValue ArrayCommand.rowExpression ArrayCommand.columnExpression ArrayCommand.rowCurrent ArrayCommand.columnCurrent ArrayCommand.Rows ArrayCommand.Columns ArrayCommand.ArrayRestrictions() ArrayCommand.ReduceRestrictionCounter() ArrayCommand.ProcessArrayParametersCompile(bool) ArrayCommand.ProcessArrayParametersExecute(bool) ArrayCommand.SetIntArray(int, int, int) ArrayCommand.SetRealArray(double, int, int) ArrayCommand.GetIntArray(int, int) ArrayCommand.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PeekCommand() Represents a command to peek (retrieve) a value from an array. public PeekCommand() Methods CheckParameters(string[]) Checks the validity of the parameters passed to the array command. public override void CheckParameters(string[] parameters) Parameters parameters string[] Exceptions CommandException Thrown if the parameters are invalid. Compile() Compiles the Peek command by processing the array parameters. public override void Compile() Execute() Executes the Peek command by retrieving a value from the specified array index and updating the variable. public override void Execute()"
  },
  "api/ASE_Assignment.PenCommand.html": {
    "href": "api/ASE_Assignment.PenCommand.html",
    "title": "Class PenCommand | ASE ASSIGNMENT",
    "keywords": "Class PenCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to set the pen color on the canvas using RGB values. public class PenCommand : CommandThreeParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CommandThreeParameters PenCommand Implements ICommand Inherited Members CommandThreeParameters.param3 CommandThreeParameters.param3unprocessed CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PenCommand() Initializes a new instance of the PenCommand class. public PenCommand() PenCommand(Canvas, int, int, int) Initializes a new instance of the PenCommand class with the specified canvas and RGB values. public PenCommand(Canvas canvas, int r, int g, int b) Parameters canvas Canvas The canvas on which the pen color will be set. r int The red component of the color (0-255). g int The green component of the color (0-255). b int The blue component of the color (0-255). Methods CheckParameters(string[]) Validates the parameters for the pen color command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters representing the RGB components. Exceptions CommandException Thrown if the number of parameters is incorrect or if the RGB values are invalid (non-integers or out of range). Exception Thrown for any unexpected errors during validation. Execute() Executes the command to set the pen color on the canvas. public override void Execute() Exceptions RestrictionException Thrown if any RGB component is outside the range 0-255. IndexOutOfRangeException Thrown if the parameter indices are invalid. Exception Thrown for any unexpected errors during execution."
  },
  "api/ASE_Assignment.PenSizeCommand.html": {
    "href": "api/ASE_Assignment.PenSizeCommand.html",
    "title": "Class PenSizeCommand | ASE ASSIGNMENT",
    "keywords": "Class PenSizeCommand Namespace ASE_Assignment Assembly ASE Assignment.dll public class PenSizeCommand : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter PenSizeCommand Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PenSizeCommand() public PenSizeCommand() PenSizeCommand(Canvas, int) public PenSizeCommand(Canvas c, int pensize) Parameters c Canvas pensize int Methods CheckParameters(string[]) public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Execute() public override void Execute() SetPenSize(int) public void SetPenSize(int penSize) Parameters penSize int"
  },
  "api/ASE_Assignment.PokeCommand.html": {
    "href": "api/ASE_Assignment.PokeCommand.html",
    "title": "Class PokeCommand | ASE ASSIGNMENT",
    "keywords": "Class PokeCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to poke (set) a value in an array at a specific index. public class PokeCommand : ArrayCommand, ICommand Inheritance object Command Evaluation ArrayCommand PokeCommand Implements ICommand Inherited Members ArrayCommand.PEEK ArrayCommand.POKE ArrayCommand.type ArrayCommand.IntValue ArrayCommand.RealValue ArrayCommand.rowsCount ArrayCommand.columnsCount ArrayCommand.intArray ArrayCommand.realArray ArrayCommand.pokeValue ArrayCommand.peekValue ArrayCommand.rowExpression ArrayCommand.columnExpression ArrayCommand.rowCurrent ArrayCommand.columnCurrent ArrayCommand.Rows ArrayCommand.Columns ArrayCommand.ArrayRestrictions() ArrayCommand.ReduceRestrictionCounter() ArrayCommand.ProcessArrayParametersCompile(bool) ArrayCommand.ProcessArrayParametersExecute(bool) ArrayCommand.SetIntArray(int, int, int) ArrayCommand.SetRealArray(double, int, int) ArrayCommand.GetIntArray(int, int) ArrayCommand.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PokeCommand() Initializes a new instance of the PokeCommand class. public PokeCommand() Methods CheckParameters(string[]) Validates the parameters for the Poke command. Ensures that the parameter list has either two or three parameters. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of strings representing the parameters passed to the Poke command. Exceptions CommandException Thrown if the parameter list has an invalid number of parameters. Compile() Compiles the Poke command by processing the array parameters for the poke operation. public override void Compile() Execute() Executes the Poke command by setting a value at the specified array index. public override void Execute() Set(StoredProgram, string) Sets the program and parameter list for the Poke command. public override void Set(StoredProgram program, string paramsList) Parameters program StoredProgram The stored program instance to set the parameters for. paramsList string The list of parameters to be used for the Poke command."
  },
  "api/ASE_Assignment.RealCommand.html": {
    "href": "api/ASE_Assignment.RealCommand.html",
    "title": "Class RealCommand | ASE ASSIGNMENT",
    "keywords": "Class RealCommand Namespace ASE_Assignment Assembly ASE Assignment.dll public class RealCommand : Real, ICommand Inheritance object Command Evaluation Real RealCommand Implements ICommand Inherited Members Real.Compile() Real.Execute() Real.Value Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() public override void Restrictions()"
  },
  "api/ASE_Assignment.RectCommand.html": {
    "href": "api/ASE_Assignment.RectCommand.html",
    "title": "Class RectCommand | ASE ASSIGNMENT",
    "keywords": "Class RectCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to draw a rectangle on the canvas. public class RectCommand : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters RectCommand Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RectCommand() Initializes a new instance of the RectCommand class. public RectCommand() RectCommand(Canvas, int, int) Initializes a new instance of the RectCommand class with the specified canvas, width, and height. public RectCommand(Canvas canvas, int width, int height) Parameters canvas Canvas The canvas on which the rectangle will be drawn. width int The width of the rectangle. height int The height of the rectangle. Methods CheckParameters(string[]) Validates the parameters for the rectangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters representing the width and height. Exceptions CommandException Thrown if the number of parameters is incorrect or if the dimensions are invalid (non-positive or not integers). Exception Thrown for any unexpected errors during validation. Execute() Executes the command to draw a rectangle on the canvas. public override void Execute() Exceptions RestrictionException Thrown if the width or height exceeds 2000. IndexOutOfRangeException Thrown if the parameter indices are invalid. Exception Thrown for any unexpected errors during execution."
  },
  "api/ASE_Assignment.ResetCommand.html": {
    "href": "api/ASE_Assignment.ResetCommand.html",
    "title": "Class ResetCommand | ASE ASSIGNMENT",
    "keywords": "Class ResetCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to reset the canvas to its initial state. public class ResetCommand : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter ResetCommand Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ResetCommand() Initializes a new instance of the ResetCommand class. public ResetCommand() ResetCommand(Canvas) Initializes a new instance of the ResetCommand class with the specified canvas. public ResetCommand(Canvas c) Parameters c Canvas The canvas to be reset. Methods CheckParameters(string[]) Validates the parameters for the reset command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters for the command. Not used in this implementation. Remarks No validation is required as the reset command does not take any parameters. Execute() Executes the command to reset the canvas. public override void Execute()"
  },
  "api/ASE_Assignment.TriCommand.html": {
    "href": "api/ASE_Assignment.TriCommand.html",
    "title": "Class TriCommand | ASE ASSIGNMENT",
    "keywords": "Class TriCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to draw a triangle on the canvas. public class TriCommand : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters TriCommand Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TriCommand() Initializes a new instance of the TriCommand class. public TriCommand() TriCommand(Canvas, int, int) Initializes a new instance of the TriCommand class with the specified canvas, base length, and height. public TriCommand(Canvas c, int baseLength, int height) Parameters c Canvas The canvas on which to draw the triangle. baseLength int The base length of the triangle. height int The height of the triangle. Methods CheckParameters(string[]) Validates the parameters for the triangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters to validate. Exceptions CommandException Thrown if the parameter list is null or does not contain exactly two parameters. Exception Thrown for any unexpected errors during validation. Execute() Executes the command to draw a triangle on the canvas. public override void Execute() Exceptions RestrictionException Thrown if the base length or height exceeds 2000. Exception Thrown for any unexpected errors during execution."
  },
  "api/ASE_Assignment.WhileCommand.html": {
    "href": "api/ASE_Assignment.WhileCommand.html",
    "title": "Class WhileCommand | ASE ASSIGNMENT",
    "keywords": "Class WhileCommand Namespace ASE_Assignment Assembly ASE Assignment.dll public class WhileCommand : MyCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand MyCompoundCommand WhileCommand Implements ICommand Inherited Members MyCompoundCommand.CorrespondingCommand MyCompoundCommand.CheckParameters(string[]) MyCompoundCommand.Compile() ConditionalCommand.endLineNumber ConditionalCommand.Execute() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WhileCommand() public WhileCommand() Methods ReduceRestrictions() protected void ReduceRestrictions()"
  },
  "api/ASE_Assignment.WriteCommand.html": {
    "href": "api/ASE_Assignment.WriteCommand.html",
    "title": "Class WriteCommand | ASE ASSIGNMENT",
    "keywords": "Class WriteCommand Namespace ASE_Assignment Assembly ASE Assignment.dll public class WriteCommand : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter WriteCommand Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WriteCommand() public WriteCommand() WriteCommand(Canvas, string) public WriteCommand(Canvas c, string text) Parameters c Canvas text string Methods CheckParameters(string[]) public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Execute() public override void Execute()"
  },
  "api/ASE_Assignment.components.MyCommandFactory.html": {
    "href": "api/ASE_Assignment.components.MyCommandFactory.html",
    "title": "Class MyCommandFactory | ASE ASSIGNMENT",
    "keywords": "Class MyCommandFactory Namespace ASE_Assignment.components Assembly ASE Assignment.dll public class MyCommandFactory : CommandFactory, ICommandFactory Inheritance object CommandFactory MyCommandFactory Implements ICommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MakeCommand(string) public virtual ICommand MakeCommand(string command) Parameters command string Returns ICommand"
  },
  "api/ASE_Assignment.components.MyCommandParser.html": {
    "href": "api/ASE_Assignment.components.MyCommandParser.html",
    "title": "Class MyCommandParser | ASE ASSIGNMENT",
    "keywords": "Class MyCommandParser Namespace ASE_Assignment.components Assembly ASE Assignment.dll public class MyCommandParser : Parser, IParser Inheritance object Parser MyCommandParser Implements IParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MyCommandParser(MyCommandFactory, MyStoredProgram) public MyCommandParser(MyCommandFactory factory, MyStoredProgram program) Parameters factory MyCommandFactory program MyStoredProgram Methods ParseCommand(string) public virtual ICommand ParseCommand(string line) Parameters line string Returns ICommand ParseProgram(string) public virtual void ParseProgram(string program) Parameters program string"
  },
  "api/ASE_Assignment.components.MyStoredProgram.html": {
    "href": "api/ASE_Assignment.components.MyStoredProgram.html",
    "title": "Class MyStoredProgram | ASE ASSIGNMENT",
    "keywords": "Class MyStoredProgram Namespace ASE_Assignment.components Assembly ASE Assignment.dll public class MyStoredProgram : StoredProgram, IList, ICollection, IEnumerable, ICloneable, IStoredProgram Inheritance object ArrayList StoredProgram MyStoredProgram Implements IList ICollection IEnumerable ICloneable IStoredProgram Inherited Members StoredProgram.FindVariable(Evaluation) ArrayList.Adapter(IList) ArrayList.Add(object) ArrayList.AddRange(ICollection) ArrayList.BinarySearch(int, int, object, IComparer) ArrayList.BinarySearch(object) ArrayList.BinarySearch(object, IComparer) ArrayList.Clear() ArrayList.Clone() ArrayList.Contains(object) ArrayList.CopyTo(Array) ArrayList.CopyTo(Array, int) ArrayList.CopyTo(int, Array, int, int) ArrayList.FixedSize(ArrayList) ArrayList.FixedSize(IList) ArrayList.GetEnumerator() ArrayList.GetEnumerator(int, int) ArrayList.GetRange(int, int) ArrayList.IndexOf(object) ArrayList.IndexOf(object, int) ArrayList.IndexOf(object, int, int) ArrayList.Insert(int, object) ArrayList.InsertRange(int, ICollection) ArrayList.LastIndexOf(object) ArrayList.LastIndexOf(object, int) ArrayList.LastIndexOf(object, int, int) ArrayList.ReadOnly(ArrayList) ArrayList.ReadOnly(IList) ArrayList.Remove(object) ArrayList.RemoveAt(int) ArrayList.RemoveRange(int, int) ArrayList.Repeat(object, int) ArrayList.Reverse() ArrayList.Reverse(int, int) ArrayList.SetRange(int, ICollection) ArrayList.Sort() ArrayList.Sort(IComparer) ArrayList.Sort(int, int, IComparer) ArrayList.Synchronized(ArrayList) ArrayList.Synchronized(IList) ArrayList.ToArray() ArrayList.ToArray(Type) ArrayList.TrimToSize() ArrayList.Capacity ArrayList.Count ArrayList.IsFixedSize ArrayList.IsReadOnly ArrayList.IsSynchronized ArrayList.this[int] ArrayList.SyncRoot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MyStoredProgram(ICanvas) public MyStoredProgram(ICanvas _canvas) Parameters _canvas ICanvas Fields SyntaxOk public bool SyntaxOk Field Value bool Properties PC public override int PC { get; set; } Property Value int Methods Add(Command) public override int Add(Command C) Parameters C Command Returns int AddMethod(Method) public override void AddMethod(Method M) Parameters M Method AddVariable(Evaluation) public override void AddVariable(Evaluation Variable) Parameters Variable Evaluation Commandsleft() public override bool Commandsleft() Returns bool DeleteVariable(string) public override void DeleteVariable(string varName) Parameters varName string EvaluateExpression(string) public override string EvaluateExpression(string Exp) Parameters Exp string Returns string EvaluateExpressionWithString(string) public override string EvaluateExpressionWithString(string expression) Parameters expression string Returns string FindVariable(string) public override int FindVariable(string varName) Parameters varName string Returns int GetMethod(string) public override Method GetMethod(string MethodName) Parameters MethodName string Returns Method GetVarValue(string) public override string GetVarValue(string varName) Parameters varName string Returns string GetVariable(int) public override Evaluation GetVariable(int index) Parameters index int Returns Evaluation GetVariable(string) public override Evaluation GetVariable(string VarName) Parameters VarName string Returns Evaluation IsExpression(string) public override bool IsExpression(string expression) Parameters expression string Returns bool NextCommand() public override object NextCommand() Returns object Pop() public override ConditionalCommand Pop() Returns ConditionalCommand Push(ConditionalCommand) public override void Push(ConditionalCommand Com) Parameters Com ConditionalCommand ResetProgram() public virtual void ResetProgram() Run() public override void Run() UpdateVariable(string, bool) public override void UpdateVariable(string varName, bool value) Parameters varName string value bool UpdateVariable(string, double) public override void UpdateVariable(string varName, double value) Parameters varName string value double UpdateVariable(string, int) public override void UpdateVariable(string varName, int value) Parameters varName string value int VariableExists(string) public override bool VariableExists(string varName) Parameters varName string Returns bool"
  },
  "api/ASE_Assignment.components.html": {
    "href": "api/ASE_Assignment.components.html",
    "title": "Namespace ASE_Assignment.components | ASE ASSIGNMENT",
    "keywords": "Namespace ASE_Assignment.components Classes MyCommandFactory MyCommandParser MyStoredProgram"
  },
  "api/ASE_Assignment_1.html": {
    "href": "api/ASE_Assignment_1.html",
    "title": "Namespace ASE_Assignment | ASE ASSIGNMENT",
    "keywords": "Namespace ASE_Assignment Classes ASEForm ArrayCommand Represents an array command for handling array operations such as creation, assignment, and retrieval of values. BooleanCommand Represents a command for handling boolean operations in the BOOSE framework. CastCommand Represents a command for casting variables between types in the BOOSE framework. CircleCommand Represents the Circle command that draws a circle on the canvas. ClearCommand Represents the Clear command that clears the canvas. CommandParser Handles parsing and processing drawing commands entered by the user. Commands are executed on the provided BOOSE.ICanvas. DrawToCommand Represents the DrawTo command that draws a line from the current position to the specified coordinates. ElseCommand Represents the \"else\" command in a conditional structure, used to define an alternative execution path when the \"if\" condition is false. EndCommand Represents the \"end\" command that marks the conclusion of compound structures such as loops, conditional statements, or methods. FillCommand Represents the Fill command that sets the filled state for shapes on the canvas. GloabalConfig Represents a global configuration class that maintains the application's global state. IfCommand Represents an \"if\" command, allowing conditional execution of program code based on a specified condition. IntCommand Represents a command for handling integer-based operations and behavior. MethodCommand Represents a command for managing methods in the program. MoveToCommand Represents a command to move the pen to a specified position on the canvas. MyCompoundCommand Represents a compound command that associates with a conditional command. This is used for commands that require matching end markers, such as \"ifEnd\", \"whileEnd\", \"forEnd\", or \"methodEnd\". PeekCommand PenCommand Represents a command to set the pen color on the canvas using RGB values. PenSizeCommand PokeCommand Represents a command to poke (set) a value in an array at a specific index. RealCommand RectCommand Represents a command to draw a rectangle on the canvas. ResetCommand Represents a command to reset the canvas to its initial state. TriCommand Represents a command to draw a triangle on the canvas. WhileCommand WriteCommand"
  },
  "api/MSTestASEAssignment.ASEUnitTests.html": {
    "href": "api/MSTestASEAssignment.ASEUnitTests.html",
    "title": "Class ASEUnitTests | ASE ASSIGNMENT",
    "keywords": "Class ASEUnitTests Namespace MSTestASEAssignment Assembly MSTestASEAssignment.dll Contains unit tests for the AppCanvas class. These tests verify that the MoveTo and DrawTo methods behave correctly. [TestClass] public sealed class ASEUnitTests Inheritance object ASEUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods DrawTo_UpdatesCursorPosition() Tests that the DrawTo(int, int) method updates the cursor position correctly after drawing. [TestMethod] public void DrawTo_UpdatesCursorPosition() MoveTo_WithinBounds_UpdatesPosition() Tests that the MoveTo(int, int) method updates the position correctly when moving within bounds. [TestMethod] public void MoveTo_WithinBounds_UpdatesPosition() MultiLineCommands_ExecutesAllCommandsSuccessfully() Tests that multiple drawing commands in sequence correctly execute all commands and update the position. [TestMethod] public void MultiLineCommands_ExecutesAllCommandsSuccessfully()"
  },
  "api/MSTestASEAssignment.Canvas.html": {
    "href": "api/MSTestASEAssignment.Canvas.html",
    "title": "Class Canvas | ASE ASSIGNMENT",
    "keywords": "Class Canvas Namespace MSTestASEAssignment Assembly MSTestASEAssignment.dll Abstract Canvas class (a placeholder to mock in tests). public abstract class Canvas Inheritance object Canvas Derived MockCanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Tri(int, int) public abstract void Tri(int baseLength, int height) Parameters baseLength int height int"
  },
  "api/MSTestASEAssignment.IfElseTest.html": {
    "href": "api/MSTestASEAssignment.IfElseTest.html",
    "title": "Class IfElseTest | ASE ASSIGNMENT",
    "keywords": "Class IfElseTest Namespace MSTestASEAssignment Assembly MSTestASEAssignment.dll [TestClass] public class IfElseTest Inheritance object IfElseTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ElseCommand_ChecksInvalidParameters() [TestMethod] public void ElseCommand_ChecksInvalidParameters() ElseCommand_ExecutesCorrectly() [TestMethod] public void ElseCommand_ExecutesCorrectly() ElseCommand_HandlesValidParameters() [TestMethod] public void ElseCommand_HandlesValidParameters() IfCommand_ExecutesConditionFalse() [TestMethod] public void IfCommand_ExecutesConditionFalse() IfCommand_ExecutesConditionTrue() [TestMethod] public void IfCommand_ExecutesConditionTrue()"
  },
  "api/MSTestASEAssignment.MockCanvas.html": {
    "href": "api/MSTestASEAssignment.MockCanvas.html",
    "title": "Class MockCanvas | ASE ASSIGNMENT",
    "keywords": "Class MockCanvas Namespace MSTestASEAssignment Assembly MSTestASEAssignment.dll Mock implementation of the Canvas class for testing purposes. public class MockCanvas : Canvas Inheritance object Canvas MockCanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BaseLength public int BaseLength { get; } Property Value int Height public int Height { get; } Property Value int TriCalled public bool TriCalled { get; } Property Value bool Methods Tri(int, int) public override void Tri(int baseLength, int height) Parameters baseLength int height int"
  },
  "api/MSTestASEAssignment.TriCommand.html": {
    "href": "api/MSTestASEAssignment.TriCommand.html",
    "title": "Class TriCommand | ASE ASSIGNMENT",
    "keywords": "Class TriCommand Namespace MSTestASEAssignment Assembly MSTestASEAssignment.dll Implementation of the TriCommand class for testing purposes. public class TriCommand Inheritance object TriCommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TriCommand(Canvas, int, int) public TriCommand(Canvas canvas, int baseLength, int height) Parameters canvas Canvas baseLength int height int Methods Execute() public void Execute()"
  },
  "api/MSTestASEAssignment.TriCommandTests.html": {
    "href": "api/MSTestASEAssignment.TriCommandTests.html",
    "title": "Class TriCommandTests | ASE ASSIGNMENT",
    "keywords": "Class TriCommandTests Namespace MSTestASEAssignment Assembly MSTestASEAssignment.dll Unit tests for the TriCommand class. [TestClass] public sealed class TriCommandTests Inheritance object TriCommandTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Execute_ValidParameters_DrawsTriangle() Tests that the Execute() method draws the triangle correctly when within bounds. [TestMethod] public void Execute_ValidParameters_DrawsTriangle()"
  },
  "api/MSTestASEAssignment.html": {
    "href": "api/MSTestASEAssignment.html",
    "title": "Namespace MSTestASEAssignment | ASE ASSIGNMENT",
    "keywords": "Namespace MSTestASEAssignment Classes ASEUnitTests Contains unit tests for the AppCanvas class. These tests verify that the MoveTo and DrawTo methods behave correctly. Canvas Abstract Canvas class (a placeholder to mock in tests). IfElseTest MockCanvas Mock implementation of the Canvas class for testing purposes. TriCommand Implementation of the TriCommand class for testing purposes. TriCommandTests Unit tests for the TriCommand class."
  },
  "api/ase_assignment.AppCanvas.html": {
    "href": "api/ase_assignment.AppCanvas.html",
    "title": "Class AppCanvas | ASE ASSIGNMENT",
    "keywords": "Class AppCanvas Namespace ase_assignment Assembly ASE Assignment.dll Represents a drawable canvas that supports basic graphical operations such as drawing shapes, setting colors, and clearing the canvas. public class AppCanvas : ICanvas Inheritance object AppCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCanvas() Initializes a new instance of the AppCanvas class with default canvas size. public AppCanvas() Properties PenColour Gets or sets the color of the pen used for drawing on the canvas. public object PenColour { get; set; } Property Value object Remarks When the color is updated, the pen is re-initialized with the new color. Xpos Gets or sets the current X-coordinate of the canvas cursor. public int Xpos { get; set; } Property Value int Remarks This property is used to manage the horizontal position of the cursor on the canvas. Ypos Gets or sets the current Y-coordinate of the canvas cursor. public int Ypos { get; set; } Property Value int Remarks This property is used to manage the vertical position of the cursor on the canvas. Methods Circle(int, bool) public void Circle(int radius, bool filled) Parameters radius int filled bool Clear() Clears the canvas by filling it with the default background color. public void Clear() Remarks The default canvas color is gray. DrawTo(int, int) public void DrawTo(int toX, int toY) Parameters toX int toY int MoveTo(int, int) public void MoveTo(int x, int y) Parameters x int y int Rect(int, int, bool) public void Rect(int width, int height, bool filled) Parameters width int height int filled bool Reset() public void Reset() Set(int, int) public void Set(int xsize, int ysize) Parameters xsize int ysize int SetColour(int, int, int) public void SetColour(int red, int green, int blue) Parameters red int green int blue int Tri(int, int) public void Tri(int width, int height) Parameters width int height int WriteText(string) Writes text to the canvas at the current cursor position. public void WriteText(string text) Parameters text string The text to be drawn. It must not be null or empty. Exceptions CanvasException Thrown when the text is null, empty, or if the Graphics object is unavailable. getBitmap() public object getBitmap() Returns object"
  },
  "api/ase_assignment.html": {
    "href": "api/ase_assignment.html",
    "title": "Namespace ase_assignment | ASE ASSIGNMENT",
    "keywords": "Namespace ase_assignment Classes AppCanvas Represents a drawable canvas that supports basic graphical operations such as drawing shapes, setting colors, and clearing the canvas."
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ASE ASSIGNMENT",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}